#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
bool cycle(int, int);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(candidates[i], name) == 0)
        {
            ranks[rank] = i; // A preferencia ranks[0] = numero do candidato i
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])

// Eleitor 1
// > (preferencia)

// (Alice, Bob, Charlie)
// Alice > Bob = 1
// Alice > Charlie = 1
// Bob > charlie = 1


// Eleitor 2

// (Bob, Alice, Charlie)
// Bob > Alice = 1
// Bob > Charlie = 2 (soma com o anterior que tambem tem preferencia)
// Alice > Charlie = 2 (tambem ja tem preferencia no voto 1)

{
    // não precisa passar 3 vezes pois o ultimo nao está acima de ninguem
    for (int i = 0; i < candidate_count - 1; i++)
    {
        for (int j = i + 1; j < candidate_count; j++)
        {
            // Ex: ranks[i] = preference (Alice) | ranks[j] = against (Bob)
            preferences[ranks[i]][ranks[j]] ++;
        }
    }

    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    // Para cada candidato na lista de preferencia
    // cruzar com cada outro candidato na lista de preferencia
    // salvar somente se tiver valor maior ou menor na lista de pares (evitar os empates)
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = i + 1; j < candidate_count; j++)
        {
            if (preferences[i][j] != preferences[j][i])
            {
                pair new_pair;
                if (preferences[i][j] > preferences[j][i])
                {
                    new_pair.winner = i;
                    new_pair.loser = j;
                }
                else
                {
                    new_pair.winner = j;
                    new_pair.loser = i;
                }
                pairs[pair_count] = new_pair;
                pair_count ++;
            }
        }
    }
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    for (int i = 0; i < pair_count - 1; i++)
    {
        int highStrength = i;
        int score = preferences[pairs[i].winner][pairs[i].loser];
        for (int j = i + 1; j < pair_count; j++)
        {
            int next_score = preferences[pairs[j].winner][pairs[j].loser];
            if (next_score > score)
            {
                highStrength = j;
                score = next_score;
            }
        }
        if (highStrength != i)
        {
            pair temp = pairs[i];
            pairs[i] = pairs[highStrength];
            pairs[highStrength] = temp;
        }
    }
    return;
}

// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    for (int i = 0; i < pair_count; i ++)
    {

        if (!cycle(pairs[i].winner, pairs[i].loser))
        {
            locked[pairs[i].winner][pairs[i].loser] = true;
        }
    }
    return;
}

bool cycle(int winner, int loser)
{
    // if loser is winner. Cycle found
    if (loser == winner)
    {
        return true;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        // if yes, then recursively call cycle function with 'i'
        if (locked[i][winner])
        {
            // if function return true, then cycle is found
            if (cycle(i, loser))
            {
                return true;
            }
        }
    }
    return false;
}

// Print the winner of the election
void print_winner(void)
{
    for (int i = 0; i < candidate_count; i++)
    {
        bool source = true;
        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[j][i])
            {
                source = false;
                break;
            }
        }
        if (source)
        {
            printf("%s\n", candidates[i]);
        }
    }
}

 

    
    
    
